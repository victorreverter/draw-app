{"version":3,"sources":["components/Placement.js","components/SortFunction.js","App.js","serviceWorker.js","index.js"],"names":["Placement","props","onClick","handleRemove","name","SortFunc","useState","setName","placement","setPlacement","sortRslt","setSortRslt","elem","newArr","filter","plc","target","innerText","console","log","loadPlc","map","plcIndex","key","className","id","type","onChange","value","onKeyDown","e","undefined","concat","document","getElementById","arrLength","length","arrSort","Math","floor","random","App","SortFunction","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4QAUeA,MARf,SAAmBC,GACjB,OACE,oCACE,uBAAGC,QAASD,EAAME,cAAeF,EAAMG,Q,MCgH9BC,MAhHf,WAAqB,IAAD,EACMC,mBAAS,IADf,mBACXF,EADW,KACLG,EADK,OAEgBD,mBAAS,IAFzB,mBAEXE,EAFW,KAEAC,EAFA,OAGcH,mBAAS,IAHvB,mBAGXI,EAHW,KAGDC,EAHC,KA+DZR,EAAe,SAAAS,GAOnB,IAAIC,EAASL,EAAUM,QAAO,SAAAC,GAE5B,OAAOA,IAAQH,EAAKI,OAAOC,aAE7BC,QAAQC,IAAIN,GAEZJ,EAAaI,IAGTO,EAAUZ,EAAUa,KAAI,SAACN,EAAKO,GAAN,OAC5B,kBAAC,EAAD,CAAWC,IAAKD,EAAUlB,KAAMW,EAAKZ,aAAcA,OAGrD,OACE,yBAAKqB,UAAU,oBACb,0CACA,2BACEC,GAAG,WACHC,KAAK,OACLC,SApFe,SAAAf,GACnBL,EAAQ,CACNH,KAAMQ,EAAKI,OAAOY,SAmFhBC,UA5EgB,SAAAC,GACN,UAAVA,EAAEP,WACcQ,IAAd3B,EAAKA,MAAoC,KAAdA,EAAKA,OAClCK,EAAaD,EAAUwB,OAAO5B,EAAKA,OACnCG,EAAQ,CAAEH,KAAM,KAGD6B,SAASC,eAAe,YAChCN,MAAQ,QAsEjB,4BAAQJ,UAAU,UAAUtB,QAjEZ,gBACA6B,IAAd3B,EAAKA,MAAoC,KAAdA,EAAKA,OAClCK,EAAaD,EAAUwB,OAAO5B,EAAKA,OACnCG,EAAQ,CAAEH,KAAM,KAOD6B,SAASC,eAAe,YAChCN,MAAQ,MAsDf,OAIA,yBAAKJ,UAAU,iBAAiBJ,GAEhC,4BAAQI,UAAU,WAAWtB,QAxDd,WACjB,IAAMiC,EAAY3B,EAAU4B,OACtBC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,GAK3CxB,EAAY,CACVD,SAAUF,EAAU6B,OAgDpB,QAIA,8CACA,4BAAK3B,EAASA,UAEd,4BAAQc,UAAU,cAAcE,KAAK,OAAOxB,QAhD3B,WACnBK,EAAQ,IACRE,EAAa,IACbE,EAAY,MA6CV,aClGS8B,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAACkB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShB,SAASC,eAAe,SD6H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.318c3658.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Placement(props) {\r\n  return (\r\n    <>\r\n      <p onClick={props.handleRemove}>{props.name}</p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Placement;","import React, { useState } from \"react\";\r\nimport Placement from \"./Placement\";\r\n\r\nimport \"../sort-styles.css\";\r\n\r\nfunction SortFunc() {\r\n  const [name, setName] = useState(\"\");\r\n  const [placement, setPlacement] = useState([]);\r\n  const [sortRslt, setSortRslt] = useState(\"\");\r\n\r\n  const handleChange = elem => {\r\n    setName({\r\n      name: elem.target.value\r\n    });\r\n    // console.log(elem.target.value);\r\n    // console.log(name);\r\n    // console.log(name.value);\r\n  };\r\n\r\n  const handleKeyDown = e => {\r\n    if (e.key === \"Enter\") {\r\n      if (name.name !== undefined && name.name !== \"\") {\r\n        setPlacement(placement.concat(name.name));\r\n        setName({ name: \"\" });\r\n        // console.log(this.state.placement);\r\n\r\n        const plcVal = document.getElementById(\"plcInput\");\r\n        plcVal.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (name.name !== undefined && name.name !== \"\") {\r\n      setPlacement(placement.concat(name.name));\r\n      setName({ name: \"\" });\r\n\r\n      // console.log(name);\r\n      // console.log(name.name);\r\n      // console.log(placement);\r\n      // console.log(placement.placement);\r\n\r\n      const plcVal = document.getElementById(\"plcInput\");\r\n      plcVal.value = \"\";\r\n    }\r\n  };\r\n\r\n  const handleDraw = () => {\r\n    const arrLength = placement.length;\r\n    const arrSort = Math.floor(Math.random() * arrLength);\r\n\r\n    // console.log(arrLength);\r\n    // console.log(placement[arrSort]);\r\n\r\n    setSortRslt({\r\n      sortRslt: placement[arrSort]\r\n    });\r\n\r\n    // console.log(sortRslt);\r\n    // console.log(sortRslt.sortRslt);\r\n  };\r\n\r\n  const handleReload = () => {\r\n    setName(\"\");\r\n    setPlacement([]);\r\n    setSortRslt(\"\");\r\n  };\r\n\r\n  const handleRemove = elem => {\r\n    // console.log(placement);\r\n    // console.log(placement.placement);\r\n    // console.log(elem.target);\r\n    // console.log(elem.target.innerText);\r\n    // console.log(\"--------- a breaker ---------\");\r\n\r\n    var newArr = placement.filter(plc => {\r\n      // console.log(plc);\r\n      return plc !== elem.target.innerText;\r\n    });\r\n    console.log(newArr);\r\n\r\n    setPlacement(newArr);\r\n  };\r\n\r\n  const loadPlc = placement.map((plc, plcIndex) => (\r\n    <Placement key={plcIndex} name={plc} handleRemove={handleRemove} />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"foodie-container\">\r\n      <h1>Raffler it</h1>\r\n      <input\r\n        id=\"plcInput\"\r\n        type=\"text\"\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n      />\r\n      <button className=\"add-btn\" onClick={handleClick}>\r\n        Add\r\n      </button>\r\n\r\n      <div className=\"plc-container\">{loadPlc}</div>\r\n\r\n      <button className=\"draw-btn\" onClick={handleDraw}>\r\n        Draw\r\n      </button>\r\n\r\n      <h3>The result is:</h3>\r\n      <h2>{sortRslt.sortRslt}</h2>\r\n\r\n      <button className=\"restart-btn\" type=\"text\" onClick={handleReload}>\r\n        Restart\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortFunc;","import React from 'react';\nimport './App.css';\nimport SortFunction from './components/SortFunction';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortFunction></SortFunction>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}